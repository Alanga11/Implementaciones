"""                LIBRERIAS                     """
import os
import matplotlib.pyplot as plt
import time
import numpy as np
from matplotlib.patches import Ellipse

opcion_Valida = False
##DEFINICION DE METODOS##

def seleccion():
    global opc_selected
    opc_selected = input("Escribe la opción a seleccionar: ")

    if not opc_selected.isdigit():
        print("La opción ingresasda no es un número")

    return opc_selected

def opcion_incorrecta():

    i = 3
    print("Recargando el menú principal en: ")
    while i >= 1:
        print (i)
        i -= 1
        time.sleep(1.3)

def limpiar_pantalla():
    os.system('cls' if os.name == 'nt' else 'clear')


def menu_principal():
    global opcion_Valida
    global opc_selected

    while opcion_Valida != True:
        time.sleep(1)
        limpiar_pantalla()
        print("""
                    Menú Principal
        -------------------------------------
        |¿Que figura necesitas?             |
        -------------------------------------
        | 1-Triángulos                      |
        | 2-Cuadrilateros                   |
        | 3-Pentagonos                      |
        | 4-Hexagonos                       |
        | 5-Circulos (Ovalos)               |
        -------------------------------------
        
        """)

        seleccion()

        if opc_selected == 1:
            sub_menu_triangulos()
        elif opc_selected == 2:
            # sub_menu_cuadrilateros()
            print("Menu en construccion")
        elif opc_selected == 3:
            # sub_menu_pentagonos()
            print("Menu en construccion")
        elif opc_selected == 4:
            # sub_menu_hexagonos()
            print("Menu en construccion")
        elif opc_selected == 5:
            #sub_menu_elipses()
            print("Menu en construccion")
        else:
            opcion_incorrecta()

### definicion de metodos para los sub-menus
def sub_menu_triangulos():
    global opc_selected
    global opcion_Valida

    while opcion_Valida != True:
        time.sleep(0.5)
        limpiar_pantalla()
        print("""
                Sub-Menú
        -------------------------
        |  Tipos de triangulos  |
        -------------------------
        |      1-Equilatero     |
        |      2-Escaleno       |
        |      3-Isosceles      |
        -------------------------
        """)

        seleccion()
        if opc_selected == 1:
            generar_TriEquilatero()
        elif opc_selected == 2:
            generar_TriEscaleno()
        elif opc_selected == 3:
            generar_TriIsoceles()
        else:
            opcion_Valida = False
            print("Opción Invalida. Vuelve a intentarlo")


def generar_TriEquilatero():
    limpiar_pantalla()
    print ("TRIANGULO EQUILATERO")
    a =int(input("Introduce el valor para todos los lados: "))
    fig, ax = plt.subplots()
    plt.title ("TRIANGULO EQUILATERO")
    #El primero es para Este y Oeste
    #El segundo es para Norte y Sur
    ax.plot([0,a], [0,0]) ##Base
    ax.plot([0,(a/2)], [0,a]) ##Lado A
    ax.plot([(a/2),a], [a,0]) ##Lado B
    ax.plot([(a/2),(a/2)], [0,a]) ##Altura
    plt.show()


def generar_TriEscaleno():
    print ("TRIANGULO EQUILATERO")
    ba = int (input("Inserte cm de Base: "))
    a = int (input("Inserte cm de Lado A: "))
    fig, ax = plt.subplots()
    plt.title ("TRIANGULO EQUILATERO")
    #El primero es para Este y Oeste
    #El segundo es para Norte y Sur
    ax.plot([0,ba], [0,0])##Base
    ax.plot([0,ba], [0,a])##Lado A
    ax.plot([ba, ba], [a,0])##Lado B
    ax.plot([ba,ba/2], [a,0])
    plt.show()


def generar_TriIsoceles():
    print ("TRIANGULO ISOSELES")
    a =int(input("Introduce el valor de la base (en cm): "))
    l = int(input("Introduce los valores de los lados (en cm): "))
    fig, ax = plt.subplots()
    plt.title ("TRIANGULO ISOSCELES")
    #El primero es para Este y Oeste
    #El segundo es para Norte y Sur
    ax.plot([0,a], [0,0]) ##Base
    ax.plot([0,(a/2)], [0,l]) ##Lado A
    ax.plot([(a/2),a], [l,0]) ##Lado B
    ax.plot([(a/2),(a/2)], [0,l]) ##Altura
    plt.show()


# def sub_menu_elipses():

# """-------------------------------------------------
# -------------------------------------------------"""
# """       MENU DE FIGURAS DE UN SOLO LADO        """

# if entrada==5:
#     limpiar_pantalla()
#     print(
#         """
#     ----------------------------
#     |          Menú            |
#      ----------------------------
#     |Tipos de Circulo u Ovalos |
#     ----------------------------
#     |        1-Circulo         |
#     |        2-Ovoide          |
#     |        3-Ovalo           |
#     ----------------------------
#     """
#       )
#     TOval=int(input("¿Cual tipo de Circulo u Ovalo necesitas? "))

# ################################################################
#  ##################        CIRCULO          ##################

# limpiar_pantalla()
# if TOval == 1:
#     print ("CIRCULO")
#     r = int (input("Introduzca el tamañano del radio que desea: "))
#     fig, ax = plt.subplots()
#     plt.title("CIRCULO")
#     circle = plt.Circle((r, r), radius=r,)
#     ax.add_patch(circle)
#     ax.set_xlim((0, r*2))
#     ax.set_ylim((0, r*2))
#     plt.show()

# ################################################################
#  ##################         OVALO           ##################

# elif TOval == 2:
#     print ("OVALO")
#     r = int(input("Introduce el radio del Ovalo: "))
#     fig, ax = plt.subplots()
#     plt.title("OVALO")
#     ellipse = Ellipse((r, r/2), width=r*2, height=r, )
#     ax.add_patch(ellipse)
#     ax.set_xlim((0, r*2))
#     ax.set_ylim((0, r*2))
#     plt.show()

# ################################################################
#  ##################        OVOIDE           ##################

# elif TOval == 3:
#     print ("OVOIDE")
#     r = int(input("Introduce el radio del Ovoide: "))
#     fig, ax = plt.subplots()
#     plt.title("OVOIDE")
#     Ovoide = Ellipse((r, r), width=r, height=r*2, )
#     ax.add_patch(Ovoide)
#     ax.set_xlim((0, r*3))
#     ax.set_ylim((0, r*3))
#     plt.show()


while True:
    menu_principal()
